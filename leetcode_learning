/*
 * -------------------------------------------------------------------------------------
 * 21. Merge Two Sorted Lists
 *
 *     Merge two sorted linked lists and return it as a new list. 
 *     The new list should be made by splicing together the nodes of the first two lists.
 *
 *     Example:
 *
 *     Input: 1->2->4, 1->3->4
 *     Output: 1->1->2->3->4->4
 *
 * -------------------------------------------------------------------------------------
 *
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {   
        
        int* IntPointer; ListNode *new_head{};
        ListNode **curr{&new_head};
        cout<<(*&new_head == new_head);

        auto addNode = [](ListNode *(*(&a)), ListNode* b) {
            *a = b;
            a = &(b->next);
            return *a;
        };
   
        while(l1 and l2) {
            if (l1->val == l2->val) {
                l1 = addNode(curr, l1);
                l2 = addNode(curr, l2);
            }
            else if (l1->val < l2->val) {
                l1 = addNode(curr, l1);
            }
            else {
                l2 = addNode(curr, l2);
            }           
        }
        
        *curr = l1? l1: l2;
        
        return new_head;
    }
};
